#include <iostream>
#include <vector>

class Resolver
{
	int N;
	std::vector<std::vector<int>> arr;
public:
	Resolver(int _N)
	{
		N = _N;
		arr.resize(N, std::vector<int>(N));
	}

	void AddEdge(int v, int u, int w)
	{
		arr[v][u] = w;
	}

	std::vector<std::vector<int>> GetAnswer()
	{
		for (int k = 0; k < N; k++)
			for (int i = 0; i < N; i++)
				for (int j = 0; j < N; j++)
				{
					arr[i][j] = std::min(arr[i][j], arr[i][k] + arr[k][j]);
				}

		return arr;
	}
	
};

int main()
{

	int N;
	std::cin >> N;

	Resolver resolver(N);
  
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
		{
			int weight;
		    std::cin >> weight;
		    resolver.AddEdge(i, j, weight);
		}

	std::vector<std::vector<int>> ans = resolver.GetAnswer();
	
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			std::cout << ans[i][j] << " ";
		}
		std::cout << '\n';
	}

}
